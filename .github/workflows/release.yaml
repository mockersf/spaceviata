name: release-flow

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"

env:
  binary: spaceviata
  itch_game: spaceviata
  itch_user: vleue
  package_assets: false

jobs:
  release:
    runs-on: ${{ matrix.target.image_name }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - channel: linux
            image_name: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            features: release
            profile: native-release
          - channel: wasm
            image_name: ubuntu-latest
            target: wasm32-unknown-unknown
            features: release
            profile: wasm-release
          - channel: macos
            image_name: macOS-latest
            target: x86_64-apple-darwin
            features: release
            profile: native-release
          - channel: windows
            image_name: windows-latest
            target: x86_64-pc-windows-msvc
            features: release
            profile: native-release
    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target.target }}
      - name: archive extension setup
        shell: pwsh
        run: |
          switch ( "${{ matrix.target.channel }}" )
          {
            "macos" { echo "extension=dmg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
            default { echo "extension=zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
          }

      - name: macOS setup
        if: matrix.target.channel == 'macos'
        run: |
          export CFLAGS="-fno-stack-check"
          export MACOSX_DEPLOYMENT_TARGET="10.9"
      - name: linux setup
        if: matrix.target.channel == 'linux'
        run: |
          sudo apt-get update; sudo apt-get install pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
      - name: wasm setup
        if: matrix.target.channel == 'wasm'
        run: |
          cargo install wasm-bindgen-cli
          sudo apt-get install -y binaryen

      - name: build
        run: |
          cargo build --profile ${{ matrix.target.profile }} --target ${{ matrix.target.target }} --no-default-features --features=${{ matrix.target.features}}

      - name: macOS finish
        if: matrix.target.channel == 'macos'
        run: |
          mkdir -p ${{ env.binary }}.app/Contents/MacOS
          cp target/${{ matrix.target.target }}/${{ matrix.target.profile }}/${{ env.binary }} ${{ env.binary }}.app/Contents/MacOS/
          strip ${{ env.binary }}.app/Contents/MacOS/${{ env.binary }}
          if [ "${{ env.package_assets }}" != "false" ]
          then
            cp -r assets ${{ env.binary }}.app/Contents/MacOS/
          fi
      - name: linux finish
        if: matrix.target.channel == 'linux'
        run: |
          mkdir linux
          cp target/${{ matrix.target.target }}/${{ matrix.target.profile }}/${{ env.binary }} linux/
          strip linux/${{ env.binary }}
          if [ "${{ env.package_assets }}" != "false" ]
          then
            cp -r assets linux/
          fi
      - name: windows finish
        if: matrix.target.channel == 'windows'
        run: |
          mkdir windows
          cp target/${{ matrix.target.target }}/${{ matrix.target.profile }}/${{ env.binary }}.exe windows/
          if ( -not "${{ env.package_assets }}" -eq "false" )
          {
            cp -r assets windows/
          }
      - name: wasm finish
        if: matrix.target.channel == 'wasm'
        run: |
          mkdir tmp
          mkdir wasm-release
          wasm-bindgen --no-typescript --out-name ${{ env.binary }} --out-dir tmp --target web target/${{ matrix.target.target }}/${{ matrix.target.profile }}/${{ env.binary }}.wasm
          wasm-opt -Oz tmp/${{ env.binary }}_bg.wasm --output wasm-release/${{ env.binary }}_bg.wasm
          cp tmp/${{ env.binary }}.js wasm-release/
          cp wasm/index.html wasm-release/
          if [ "${{ env.package_assets }}" != "false" ]
          then
            cp -r assets wasm-release/
          fi

      - name: macOS packaging
        if: matrix.target.channel == 'macos'
        run: |
          hdiutil create -fs HFS+ -volname "${{ env.binary }}" -srcfolder ${{ env.binary }}.app ${{ env.binary }}.${{ env.extension }}
      - name: linux packaging
        if: matrix.target.channel == 'linux'
        uses: papeloto/action-zip@v1
        with:
          files: linux
          dest: ${{ env.binary }}.${{ env.extension }}
      - name: windows packaging
        if: matrix.target.channel == 'windows'
        uses: papeloto/action-zip@v1
        with:
          files: windows
          dest: ${{ env.binary }}.${{ env.extension }}
      - name: wasm packaging
        if: matrix.target.channel == 'wasm'
        uses: papeloto/action-zip@v1
        with:
          files: wasm-release
          dest: ${{ env.binary }}.${{ env.extension }}

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.binary }}.${{ env.extension }}
          asset_name: ${{ env.binary }}-${{ matrix.target.channel }}-${{ steps.get_version.outputs.tag }}.${{ env.extension }}
          tag: ${{ github.ref }}
          overwrite: true

      - name: save artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.target.channel }}-release
          path: ${{ env.binary }}.${{ env.extension }}

  publish-itchio:
    needs: ["release"]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - channel: linux
          - channel: wasm
          - channel: macos
          - channel: windows
    steps:
      - uses: little-core-labs/get-git-tag@v3.0.1
        id: get_version
      - name: archive extension setup
        shell: pwsh
        run: |
          switch ( "${{ matrix.target.channel }}" )
          {
            "macos" { echo "extension=dmg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
            default { echo "extension=zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append }
          }
      - name: Download last release
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.target.channel }}-release
      - uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: ${{ matrix.target.channel }}
          ITCH_GAME: ${{ env.itch_game }}
          ITCH_USER: ${{ env.itch_user }}
          PACKAGE: ${{ matrix.target.channel }}-release/${{ env.binary }}.${{ env.extension }}
          VERSION: ${{ steps.get_version.outputs.tag }}
